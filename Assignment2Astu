'''<------------------Importing the required packages---------------------------->'''
import cv2
import numpy as np
import matplotlib.image as mpimg
import os 
import sys
import matplotlib.pyplot as plt

'''
    Foreground Detection: d(x,y,t) = I(x,y,t) - Mean(x,y,t-1)

Change(x,y,t) = d2(x,y,t)<=lmda2 * varience(x,y,t)

which is implementing below
'''
def foreground_change_Detection(img_file,mean,varience,lmda):
    img=cv2.imread(img_file)
    diff=img - mean
    var = varience *(lmda**2) 
    diff_square = np.square(diff)
    I = diff_square - var #Checking the inequality
    mask = np.all(I>0,axis=2)
    return_I = 255*mask.astype(int)
    rerturn_I = return_I.astype(np.uint8)
    return return_I

#Initial Background condition: Calculating mean and varience

def initial_Background(intial_img):
    arr_img = mpimg.imread(intial_img)
    mean = arr_img
    varience = 5*np.ones(arr_img.shape)
    return mean,varience

#The return matrix is divided into some patches and by voting decides that for each pixel.(255 or 0)

def voting(return_I,eta,a,b):
    row ,column = return_I.shape
    column_I = np.zeros(( return_I.shape[0], return_I.shape[1]))
    for i in range(a,row - 1 -a):
       for j in range(b,column - 1 -b):
          patch = return_I[i-a:i,j-b:j]
          unique_val, counts = np.unique( patch,return_counts=True)

          if len(counts)==1 and unique_val[0]==1:
              column_I[i,j] = 255
          if len(counts)>1:
              if counts[1]>eta*a*b:
                  column_I[i,j] = 255
    column_I =  column_I.astype(np.uint8)

    return   column_I


#Updating the mean and varience images using a weighted average method

def Update_function(column_I,img_path,mean,varience,alpha):
    img = mpimg.imread(img_path)
    updated_mean = np.zeros(img.shape)
    updated_varience = np.zeros(img.shape)
    diff = img - mean
    diff_square = np.square(diff)
    for  i in range(column_I.shape[0]):
        for  j in range(column_I.shape[1]): 
            if column_I[i,j]==0:#white
                updated_mean[i,j,:] = (1-alpha)*mean[i,j,:] + alpha*img[i,j,:]
                updated_varience[i,j,:] = (1-alpha)*(varience[i,j,:] + alpha*diff_square[i,j,:])
                updated_varience[i,j,:]= np.clip(updated_varience[i,j,:],a_min = 5,a_max=None)
    return updated_mean , updated_varience




import os
path = os.chdir("C:\\Users\\91789\\Desktop\\AirStripVideoDataSetForBackGroundSubtraction\\AirStripVideo")#My computer path to the datset directory




def background_substraction(img_directory,num_of_input,lmbda,eta,a,b,alpha):
    img_file = os.listdir(img_directory)
    init_image = os.path.join(img_directory,img_file[0])
    mean,varience = initial_Background(init_image)

    for i in range(1,num_of_input):
        img_path = os.path.join(img_directory,img_file[i])
        print(i)
        fig ,ax = plt.subplots(1,3,figsize=(10,10))
        return_I = foreground_change_Detection(img_path,mean,varience,lmbda)
        ax[0].imshow(return_I,cmap= 'gray')
        column_I = voting(return_I,eta,a,b)
        mean,varience = Update_function(column_I,img_path,mean,varience,alpha)
        ax[1].imshow(column_I,cmap= 'gray')
        img = cv2.imread(img_path)
        ax[2].imshow(img,cmap= 'gray')
        plt.show()
def Parameter_change_detection(img_directory,image,lmbda,eta,a,b,alpha):
    
    img_file = os.listdir(img_directory)
    init_image = os.path.join(img_directory,img_file[0])
    mean,varience = initial_Background(init_image)

    print('ckecking for lambda and eta value',lmbda,eta)
    img_path = os.path.join(img_directory,img_file[image])
    fig ,ax = plt.subplots(1,3,figsize=(10,10))
    return_I = foreground_change_Detection(img_path,mean,varience,lmbda)
    ax[0].imshow(return_I,cmap= 'gray')
    column_I = voting(return_I,eta,a,b)
    mean,varience = Update_function(column_I,img_path,mean,varience,alpha)
    ax[1].imshow(column_I,cmap= 'gray')
    img = cv2.imread(img_path)
    ax[2].imshow(img,cmap= 'gray')
    plt.show()

    
'''<-------------------------End  of Functions------------------------------------->'''

num = int(input('HOW MANY NUMBER OF SAMPLE WNAT TO SHOW'))
background_substraction('./Images',num,0.8,0.8,8,8,0.8)#giving the best

'''
    Noting down the changes in any one of the predicted images as the eta and lambda parameters are varied.
'''
eta_and_lambda_values = np.arange(0.7,0.91,0.02)
image = int(input('what file want to check the change'))
'''
    Performing  Background Subtraction on the dataset by varying:
        A) eta (Voting parameter) from 0.7 to 0.9 in steps of 0.02.
        B) lambda (Chebyshev thresholding parameter) from 0.7 to 0.9 in steps of 0.02.

'''

for i in np.nditer(eta_and_lambda_values):#For loop to iterate the parameters
    Parameter_change_detection('./Images',image,i,i,8,8,0.8)
    
